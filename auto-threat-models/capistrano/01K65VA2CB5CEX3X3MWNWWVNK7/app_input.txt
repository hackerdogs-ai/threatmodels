Repository: https://github.com/capistrano/capistrano

README.md Content:

# Capistrano: A deployment automation tool built on Ruby, Rake, and SSH.

[![Gem Version](https://badge.fury.io/rb/capistrano.svg)](http://badge.fury.io/rb/capistrano) [![Build Status](https://github.com/capistrano/capistrano/actions/workflows/ci.yml/badge.svg)](https://github.com/capistrano/capistrano/actions/workflows/ci.yml) [![Code Climate](https://codeclimate.com/github/capistrano/capistrano/badges/gpa.svg)](https://codeclimate.com/github/capistrano/capistrano) [![CodersClan](https://img.shields.io/badge/get-support-blue.svg)](http://codersclan.net/?repo_id=325&source=small)

Capistrano is a framework for building automated deployment scripts. Although Capistrano itself is written in Ruby, it can easily be used to deploy projects of any language or framework, be it Rails, Java, or PHP.

Once installed, Capistrano gives you a `cap` tool to perform your deployments from the comfort of your command line.

```
$ cd my-capistrano-enabled-project
$ cap production deploy
```

When you run `cap`, Capistrano dutifully connects to your server(s) via SSH and executes the steps necessary to deploy your project. You can define those steps yourself by writing [Rake](https://github.com/ruby/rake) tasks, or by using pre-built task libraries provided by the Capistrano community.

Tasks are simple to make. Here's an example:

```ruby
task :restart_sidekiq do
  on roles(:worker) do
    execute :service, "sidekiq restart"
  end
end
after "deploy:published", "restart_sidekiq"
```

*Note: This documentation is for the current version of Capistrano (3.x). If you are looking for Capistrano 2.x documentation, you can find it in [this archive](https://github.com/capistrano/capistrano-2.x-docs).*

---

## Contents

* [Features](#features)
* [Gotchas](#gotchas)
* [Quick start](#quick-start)
* [Finding help and documentation](#finding-help-and-documentation)
* [How to contribute](#how-to-contribute)
* [License](#license)

## Features

There are many ways to automate deployments, from simple rsync bash scripts to complex containerized toolchains. Capistrano sits somewhere in the middle: it automates what you already know how to do manually with SSH, but in a repeatable, scalable fashion. There is no magic here!

Here's what makes Capistrano great:

#### Strong conventions

Capistrano defines a standard deployment process that all Capistrano-enabled projects follow by default. You don't have to decide how to structure your scripts, where deployed files should be placed on the server, or how to perform common tasks: Capistrano has done this work for you.

#### Multiple stages

Define your deployment once, and then easily parameterize it for multiple *stages* (environments), e.g. `qa`, `staging`, and `production`. No copy-and-paste necessary: you only need to specify what is different for each stage, like IP addresses.

#### Parallel execution

Deploying to a fleet of app servers? Capistrano can run each deployment task concurrently across those servers and uses connection pooling for speed.

#### Server roles

Your application may need many different types of servers: a database server, an app server, two web servers, and a job queue work server, for example. Capistrano lets you tag each server with one or more roles, so you can control what tasks are executed where.

#### Community driven

Capistrano is easily extensible using the rubygems package manager. Deploying a Rails app? Wordpress? Laravel? Chances are, someone has already written Capistrano tasks for your framework of choice and has distributed it as a gem. Many Ruby projects also come with Capistrano tasks built-in.

#### It's just SSH

Everything in Capistrano comes down to running SSH commands on remote servers. On the one hand, that makes Capistrano simple. On the other hand, if you aren't comfortable SSH-ing into a Linux box and doing stuff on the command-line, then Capistrano is probably not for you.

## Gotchas

While Capistrano ships with a strong set of conventions that are common for all types of deployments, it needs help understanding the specifics of your project, and there are some things Capistrano is not suited to do.

#### Project specifics

Out of the box, Capistrano can deploy your code to server(s), but it does not know how to *execute* your code. Does `foreman` need to be run? Does Apache need to be restarted? You'll need to tell Capistrano how to do this part by writing these deployment steps yourself, or by finding a gem in the Capistrano community that does it for you.

#### Key-based SSH

Capistrano depends on connecting to your server(s) with SSH using key-based (i.e. password-less) authentication. You'll need this working before you can use Capistrano.

#### Provisioning

Likewise, your server(s) will likely need supporting software installed before you can perform a deployment. Capistrano itself has no requirements other than SSH, but your application probably needs database software, a web server like Apache or Nginx, and a language runtime like Java, Ruby, or PHP. These *server provisioning* steps are not done by Capistrano.

#### `sudo`, etc.

Capistrano is designed to deploy using a single, non-privileged SSH user, using a *non-interactive* SSH session. If your deployment requires `sudo`, interactive prompts, authenticating as one user but running commands as another, you can probably accomplish this with Capistrano, but it may be difficult. Your automated deployments will be much smoother if you can avoid such requirements.

#### Shells

Capistrano 3 expects a POSIX shell like Bash or Sh. Shells like tcsh, csh, and such may work, but probably will not.

## Quick start

### Requirements

* Ruby version 2.0 or higher on your local machine (MRI or Rubinius)
* A project that uses source control (Git, Mercurial, and Subversion support is built-in)
* The SCM binaries (e.g. `git`, `hg`) needed to check out your project must be installed on the server(s) you are deploying to
* [Bundler](http://bundler.io), along with a Gemfile for your project, are recommended

### Install the Capistrano gem

Add Capistrano to your project's Gemfile using `require: false`:

``` ruby
group :development do
  gem "capistrano", "~> 3.17", require: false
end
```

Then run Bundler to ensure Capistrano is downloaded and installed:

``` sh
$ bundle install
```

### "Capify" your project

Make sure your project doesn't already have a "Capfile" or "capfile" present. Then run:

``` sh
$ bundle exec cap install
```

This creates all the necessary configuration files and directory structure for a Capistrano-enabled project with two stages, `staging` and `production`:

```
├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks
```

To customize the stages that are created, use:

``` sh
$ bundle exec cap install STAGES=local,sandbox,qa,production
```

Note that the files that Capistrano creates are simply templates to get you started. Make sure to edit the `deploy.rb` and stage files so that they contain values appropriate for your project and your target servers.

### Command-line usage

``` sh
# list all available tasks
$ bundle exec cap -T

# deploy to the staging environment
$ bundle exec cap staging deploy

# deploy to the production environment
$ bundle exec cap production deploy

# simulate deploying to the production environment
# does not actually do anything
$ bundle exec cap production deploy --dry-run

# list task dependencies
$ bundle exec cap production deploy --prereqs

# trace through task invocations
$ bundle exec cap production deploy --trace

# lists all config variable before deployment tasks
$ bundle exec cap production deploy --print-config-variables
```

## Finding help and documentation

Capistrano is a large project encompassing multiple GitH...
(README truncated due to length)



JS Files:
File: docs/assets/js/foundation.min.js

File: docs/assets/js/foundation/foundation.alerts.js
Functions:
function ($, window, document, undefined) {
function (scope, method, options) {
function () {
function (e) {
function () {
function () {
function () {

File: docs/assets/js/foundation/foundation.clearing.js
Functions:
function ($, window, document, undefined) {
function (scope, method, options) {
function () {
function () {
function (e, current, target) {
... (37 more functions)

File: docs/assets/js/foundation/foundation.cookie.js
Functions:
function ($, document, undefined) {
function raw(s) {
function decoded(s) {
function (key, value, options) {
function (key, options) {

File: docs/assets/js/foundation/foundation.dropdown.js
Functions:
function ($, window, document, undefined) {
      opened: function()
      closed: function()
function (scope, method, options) {
function () {
function (e) {
function (e) {
function (e) {
function (e) {
function () {
... (9 more functions)

File: docs/assets/js/foundation/foundation.forms.js
Functions:
function ($, window, document, undefined) {
function (scope, method, options) {
function () {
function () {
function (e) {
... (32 more functions)

File: docs/assets/js/foundation/foundation.interchange.js
Functions:
function ($, window, document, undefined) {
function (el, path) {
function (scope, method, options) {
function () {
function () {
function () {
function (uuid, scenarios) {
function (force_update) {
function () {
function (image, last) {
... (13 more functions)

File: docs/assets/js/foundation/foundation.joyride.js
Functions:
function ($, window, document, undefined) {
function (scope, method, options) {
function () {
function (e) {
function (e) {
... (43 more functions)

File: docs/assets/js/foundation/foundation.js
Functions:
function ($, window, document, undefined) {
function (oThis) {
function () {
function () {
function (searchElement /*, fromIndex */ ) {
... (32 more functions)

File: docs/assets/js/foundation/foundation.magellan.js
Functions:
function ($, window, document, undefined) {
function (scope, method, options) {
function () {
function (e) {
function (e) {
function () {
function () {
function () {
function () {

File: docs/assets/js/foundation/foundation.orbit.js
Functions:
function ($, window, document, undefined) {
function (scope, method, options) {
    _container_html: function()
    _bullets_container_html: function($slides)
    _slide_number_html: function(slide_number, total_slides)
... (11 more functions)

File: docs/assets/js/foundation/foundation.placeholder.js
Functions:
			'get': function(element)
			'set': function(element, value)
function args(elem) {
function clearPlaceholder(event, value) {
function setPlaceholder() {
function ($, window, document, undefined) {
function (scope, method, options) {
function () {

File: docs/assets/js/foundation/foundation.reveal.js
Functions:
function ($, window, document, undefined) {
      open: function()
      opened: function()
      close: function()
      closed: function()
function (scope, method, options) {
function () {
function (e) {
function (e) {
function ( event ) {
... (20 more functions)


INFO Files:
Analysis truncated: 112 more files not analyzed due to token limit.


Repository Analysis Summary:
- Files analyzed: 13 of 125 total files
- Token usage estimate: ~2805 tokens
- Token limit configured: 4000 tokens
