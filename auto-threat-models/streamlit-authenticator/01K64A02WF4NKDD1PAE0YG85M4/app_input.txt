Repository: https://github.com/mkhorasani/Streamlit-Authenticator

README.md Content:
<img src="https://raw.githubusercontent.com/mkhorasani/Streamlit-Authenticator/main/graphics/logo.png" alt="Streamlit Authenticator logo" style="margin-top:50px;width:450px"></img>
<!--- [![Downloads](https://pepy.tech/badge/streamlit-authenticator)](https://pepy.tech/project/streamlit-authenticator) --->
<!--- [!["Buy Me A Coffee"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/khorasani) --->

**A secure authentication module to manage user access in a Streamlit application**

[![Downloads](https://static.pepy.tech/badge/streamlit-authenticator)](https://pepy.tech/project/streamlit-authenticator)
[![Downloads](https://static.pepy.tech/badge/streamlit-authenticator/month)](https://pepy.tech/project/streamlit-authenticator)
[![Downloads](https://static.pepy.tech/badge/streamlit-authenticator/week)](https://pepy.tech/project/streamlit-authenticator)
<!--- <br/><br/><br/> ---?
<!--- <a href="http://tinyurl.com/2p8mw32d"><img src="https://raw.githubusercontent.com/mkhorasani/streamlit_authenticator_test/main/Web%20App%20Web%20Dev%20with%20Streamlit%20-%20Cover.png" width="300" height="450"> --->

<!--- ###### _To learn more please refer to my book [Web Application Development with Streamlit](http://tinyurl.com/2p8mw32d)._ --->

## Table of Contents
- [Quickstart](#1-quickstart)
- [Installation](#2-installation)
- [Creating a config file](#3-creating-a-config-file)
- [Setup](#4-setup)
- [Creating a login widget](#5-creating-a-login-widget)
- [Creating a guest login widget](#6-creating-a-guest-login-widget) ðŸš€ **NEW**
- [Authenticating users](#7-authenticating-users)
- [Enabling two factor authentication](#8-enabling-two-factor-authentication) ðŸš€ **NEW**
- [Creating a reset password widget](#9-creating-a-reset-password-widget)
- [Creating a new user registration widget](#10-creating-a-new-user-registration-widget)
- [Creating a forgot password widget](#11-creating-a-forgot-password-widget)
- [Creating a forgot username widget](#12-creating-a-forgot-username-widget)
- [Creating an update user details widget](#13-creating-an-update-user-details-widget)
- [Updating the config file](#14-updating-the-config-file)
- [License](#license)

### 1. Quickstart

* Subscribe to receive a free [API key](https://stauthenticator.com/)
* Check out the [demo app](https://st-demo-application.streamlit.app/).
* Feel free to visit the [API reference](https://streamlit-authenticator.readthedocs.io/en/stable/).
* And finally follow the tutorial below.

### 2. Installation

Streamlit-Authenticator is distributed via [PyPI](https://pypi.org/project/streamlit-authenticator/):

```python
pip install streamlit-authenticator
```

Using Streamlit-Authenticator is as simple as importing the module and calling it to verify your user's credentials.

```python
import streamlit as st
import streamlit_authenticator as stauth
```

### 3. Creating a config file

* Create a YAML config file and add to it your user's credentials: including username, email, first name, last name, and password (plain text passwords will be hashed automatically).
* Enter a name, random key, and number of days to expiry, for a re-authentication cookie that will be stored on the client's browser to enable password-less re-authentication. If you do not require re-authentication, you may set the number of days to expiry to 0.
* Define an optional list of pre-authorized emails of users who are allowed to register and add their credentials to the config file using the **register_user** widget.
* Add the optional configuration parameters for OAuth2 if you wish to use the **experimental_guest_login** button.
* **_Please remember to update the config file (as shown in step 14) whenever the contents are modified or after using any of the widgets or buttons._**

```python
cookie:
  expiry_days: 30
  key: # To be filled with any string
  name: # To be filled with any string
credentials:
  usernames:
    jsmith:
      email: jsmith@gmail.com
      failed_login_attempts: 0 # Will be managed automatically
      first_name: John
      last_name: Smith
      logged_in: False # Will be managed automatically
      password: abc # Will be hashed automatically
      roles: # Optional
      - admin
      - editor
      - viewer
    rbriggs:
      email: rbriggs@gmail.com
      failed_login_attempts: 0 # Will be managed automatically
      first_name: Rebecca
      last_name: Briggs
      logged_in: False # Will be managed automatically
      password: def # Will be hashed automatically
      roles: # Optional
      - viewer
oauth2: # Optional
  google: # Follow instructions: https://developers.google.com/identity/protocols/oauth2
    client_id: # To be filled
    client_secret: # To be filled
    redirect_uri: # URL to redirect to after OAuth2 authentication
  microsoft: # Follow instructions: https://learn.microsoft.com/en-us/graph/auth-register-app-v2
    client_id: # To be filled
    client_secret: # To be filled
    redirect_uri: # URL to redirect to after OAuth2 authentication
    tenant_id: # To be filled
pre-authorized: # Optional
  emails:
  - melsby@gmail.com
api_key: # Optional - register to receive a free API key: https://stauthenticator.com
```

* _Please note that the 'failed_login_attempts' and 'logged_in' fields corresponding to each user's number of failed login attempts and log-in status in the credentials will be added and managed automatically._

### 4. Setup

* Subsequently import the config file into your script and create an authentication object.

```python
import yaml
from yaml.loader import SafeLoader

with open('../config.yaml') as file:
    config = yaml.load(file, Loader=SafeLoader)

# Pre-hashing all plain text passwords once
# stauth.Hasher.hash_passwords(config['credentials'])

authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days']
)
```

* Plain text passwords will be hashed automatically by default, however, for a large number of users it is recommended to pre-hash the passwords in the credentials using the **Hasher.hash_passwords** function.
* If you choose to pre-hash the passwords, please set the **auto_hash** parameter in the **Authenticate** class to False.

> ### Hasher.hash_passwords
> #### Parameters:
>  - **credentials:** _dict_
>    - The credentials dict with plain text passwords.
> #### Returns:
> - _dict_
>   - The credentials dict with hashed passwords.

> ### Authenticate
> #### Parameters:
>  - **credentials:** _dict, str_
>    - Dictionary with the usernames, names, passwords, and emails, and other user data, or path pointing to the location of the config file.
>  - **cookie_name:** _str_
>    - Specifies the name of the re-authentication cookie stored on the client's browser for password-less re-authentication.
>  - **cookie_key:** _str_
>    - Specifies the key that will be used to hash the signature of the re-authentication cookie.
>  - **cookie_expiry_days:** _float, default 30.0_
>    - Specifies the number of days before the re-authentication cookie automatically expires on the client's browser.
>  - **validator:** _Validator, optional, default None_
>    - Provides a validator object that will check the validity of the username, name, and email fields.
>  - **auto_hash:** _bool, default True_
>    - Automatic hashing requirement for passwords, True: plain text passwords will be hashed automatically, False: plain text passwords will not be hashed automatically.
>  - **api_key:** _str, optional, default None_
>    - API key used to connect to the cloud server to send two factor authorization codes, reset passwords, and forgotten usernames to the user by email.
>  - ****kwargs:** _dict, optional_
>    - Arguments to pass to the Authenticate class.

* **_Please remember to ...
(README truncated due to length)



PY Files:
File: docs/conf.py
Imports:
import os
import sys

File: setup.py
Imports:
import setuptools

File: streamlit_authenticator/__init__.py
Imports:
import yaml
import streamlit as st
import streamlit.components.v1 as components
from yaml.loader import SafeLoader
from .views import Authenticate
... (1 more imports)

File: streamlit_authenticator/controllers/__init__.py
Imports:
from .authentication_controller import AuthenticationController
from .cookie_controller import CookieController

File: streamlit_authenticator/controllers/authentication_controller.py
Imports:
import json
from typing import Any, Callable, Dict, List, Optional, Tuple, Type
import streamlit as st
... (2 more imports)
Classes:
class AuthenticationController:

File: streamlit_authenticator/controllers/cookie_controller.py
Imports:
from typing import Any, Dict, Optional
from ..models import CookieModel
Classes:
class CookieController:

File: streamlit_authenticator/models/__init__.py
Imports:
from .authentication_model import AuthenticationModel
from .cookie_model import CookieModel

File: streamlit_authenticator/models/authentication_model.py
Imports:
import json
from typing import Any, Callable, Dict, List, Literal, Optional, Tuple
import streamlit as st
... (5 more imports)
Classes:
class AuthenticationModel:

File: streamlit_authenticator/models/cloud/__init__.py
Imports:
from .cloud_model import CloudModel

File: streamlit_authenticator/models/cloud/cloud_model.py
Imports:
from typing import Literal, Optional
import json
import requests
import streamlit as st
from ... import params
... (1 more imports)
Classes:
class CloudModel:

File: streamlit_authenticator/models/cookie_model.py
Imports:
from typing import Any, Dict, Optional
from datetime import datetime, timedelta
import jwt
from jwt import DecodeError, InvalidSignatureError
import streamlit as st
... (2 more imports)
Classes:
class CookieModel:

File: streamlit_authenticator/models/oauth2/__init__.py
Imports:
from .google_model import GoogleModel
from .microsoft_model import MicrosoftModel

File: streamlit_authenticator/models/oauth2/google_model.py
Imports:
import base64
import hashlib
import os
import time
from typing import Dict, Union
... (4 more imports)
Classes:
class GoogleModel:

File: streamlit_authenticator/models/oauth2/microsoft_model.py
Imports:
import base64
import hashlib
import json
import os
import time
... (5 more imports)
Classes:
class MicrosoftModel:

File: streamlit_authenticator/params.py

File: streamlit_authenticator/utilities/__init__.py
Imports:
from .exceptions import (AuthenticateError,
from .encryptor import Encryptor
from .hasher import Hasher
from .helpers import Helpers
from .validator import Validator

File: streamlit_authenticator/utilities/encryptor.py
Imports:
import base64
import hashlib
from cryptography.fernet import Fernet
Classes:
class Encryptor:

File: streamlit_authenticator/utilities/exceptions.py
Classes:
class AuthenticateError(Exception):
class CredentialsError(Exception):
class CloudError(Exception):
class DeprecationError(Exception):
class ForgotError(Exception):
... (6 more classes)

File: streamlit_authenticator/utilities/hasher.py
Imports:
import re
import bcrypt
from typing import Dict, List
Classes:
class Hasher:


INFO Files:
Analysis truncated: 6 more files not analyzed due to token limit.


Repository Analysis Summary:
- Files analyzed: 19 of 25 total files
- Token usage estimate: ~2829 tokens
- Token limit configured: 4000 tokens
