Repository: https://github.com/caprover/caprover

README.md Content:
<div align="center">
<h1>CapRover</h1>
<a href="https://hub.docker.com/r/caprover/caprover/" target="_blank" title="Docker Pulls">
<img src="https://img.shields.io/docker/pulls/caprover/caprover.svg" alt="Docker Pulls"/>
</a>
<a href="https://opencollective.com/caprover#backer" target="_blank" title="Open Collective backers and sponsors">
<img src="https://img.shields.io/opencollective/all/caprover" alt="Open Collective backers and sponsors"/>
</a>
<a href="https://github.com/caprover/caprover/releases" target="_blank" title="GitHub release (latest by date)">
<img src="https://img.shields.io/github/v/release/caprover/caprover" alt="GitHub release (latest by date)"/>
</a>

Easiest app/database deployment platform and webserver package for your NodeJS, Python, PHP, Ruby, Go applications.

No Docker, nginx knowledge required!

<a href="https://youtu.be/VPHEXPfsvyQ" target="_blank" title="YouTube">
<img src="https://raw.githubusercontent.com/caprover/caprover-website/master/graphics/screenshots-video-small.png" alt="YouTube"/>
</a>
</div>

## What's this?

CapRover is an extremely easy to use app/database deployment & web server manager for your **NodeJS, Python, PHP, ASP.NET, Ruby, MariaDB, MySQL, MongoDB, Postgres, WordPress (and etc...)** applications!

It's blazingly fast and very robust as it uses Docker, nginx, LetsEncrypt and NetData under the hood behind its simple-to-use interface.

‚úî CLI for automation and scripting

‚úî Web GUI for ease of access and convenience

‚úî No lock-in! Remove CapRover and your apps keep working!

‚úî Docker Swarm under the hood for containerization and clustering

‚úî Nginx (fully customizable template) under the hood for load-balancing

‚úî Let's Encrypt under the hood for free SSL (HTTPS)

### Seriously! Who should care about CapRover?

-   A [web] developer who does not like spending hours and days setting up a server, build tools, sending code to server, build it, get an SSL certificate, install it, update nginx over and over again.
-   A developer who uses expensive services like Heroku, Microsoft Azure and etc. And is interested in reducing their cost by 50x (Heroku charges 250USD/month for their 2gb instance, the same server is 5$ on Hetzner!!)
-   Someone who prefers to write more of `showResults(getUserList())` and not much of `$ apt-get install libstdc++6 > /dev/null`
-   A developer who likes installing MariaDB, MySQL, MongoDB and etc on their server by selecting from a dropdown and clicking on install!
-   How much server/docker/linux knowledge is required to set up a CapRover server? Answer: Knowledge of Copy & Paste!! Head over to "Getting Started" for information on what to copy & paste ;-)

## Learn More!

For more details and documentation, please visit https://CapRover.com/

## Contributors

CapRover exists thanks to all the great people who have contributed to this project. [[Contribute](CONTRIBUTING.md)].
<a href="https://github.com/caprover/caprover/graphs/contributors"><img src="https://opencollective.com/caprover/contributors.svg?width=690&button=false" /></a>

## Financial Supporters

A big thank you to all our supporters! üôè

[![Donate](https://opencollective.com/caprover/donate/button.png?color=blue)](https://opencollective.com/caprover#backer)


JS Files:
File: dev-scripts/clear-custom-nginx.js
Imports:
const fs = require('fs-extra')

File: dev-scripts/clear-pro-config.js
Imports:
const fs = require('fs-extra')

File: dev-scripts/validate-build-version-docker-hub.js
Imports:
const requestOriginal = require('request')
const fs = require('fs-extra')
Functions:
function request(url) {
function (resolve, reject) {
function (error, response, body) {
function () {
function (body) {
function getTagValue(tag) {
function (err) {

File: jest.config.js


TS Files:
File: src/api/ApiStatusCodes.ts
Imports:
import { Response } from 'express'
import Logger from '../utils/Logger'
import BaseApi from './BaseApi'
import { CaptainError } from './CaptainError'
Classes:
class ApiStatusCodes {
Functions:
function (error: CaptainError | any) {

File: src/api/BaseApi.ts
Classes:
class BaseApi {

File: src/api/CaptainError.ts
Classes:
class CaptainError extends Error {

File: src/app.ts
Imports:
import express = require('express')
import path = require('path')
import favicon = require('serve-favicon')
import loggerMorgan = require('morgan')
import cookieParser = require('cookie-parser')
... (16 more imports)
Functions:
function (req, res) {
function (req, res, next) {
function (req, res, next) {
function () {
function (req, res, next) {
function (req, res, next) {
function (req, res, next) {
function (req, res, next) {
function (err, req, resOriginal: http.ServerResponse) {
function (req, res, next) {
... (5 more functions)

File: src/datastore/AppsDataStore.ts
Imports:
import { v4 as uuid } from 'uuid'
import ApiStatusCodes from '../api/ApiStatusCodes'
import {
... (9 more imports)
Classes:
class AppsDataStore {
Functions:
function isNameAllowed(name: string) {
function isDockerVolumeNameAllowed(name: string) {
function isPortValid(portNumber: number) {
function () {
function () {
... (33 more functions)

File: src/datastore/DataStore.ts
Imports:
import Configstore = require('configstore')
import fs = require('fs-extra')
import {
... (10 more imports)
Classes:
class DataStore {
Functions:
function () {
function () {
function () {
function (themesFetched) {
function () {
... (25 more functions)

File: src/datastore/DataStoreProvider.ts
Imports:
import ApiStatusCodes from '../api/ApiStatusCodes'
import { IHashMapGeneric } from '../models/ICacheGeneric'
import CaptainConstants from '../utils/CaptainConstants'
import DataStore from './DataStore'
Functions:
function (namespace: string) {

File: src/datastore/ProDataStore.ts
Imports:
import configstore = require('configstore')
import { v4 as uuid } from 'uuid'
import { IProConfig } from '../models/IProFeatures'
import ProManagerUtils from '../user/pro/ProManagerUtils'
Classes:
class ProDataStore {
Functions:
function getDataKey(key: string) {
function () {
function () {
function () {
function () {
function (installationId) {
function () {
function () {
function () {
function (pc) {
... (1 more functions)

File: src/datastore/ProjectsDataStore.ts
Imports:
import configstore = require('configstore')
import ApiStatusCodes from '../api/ApiStatusCodes'
import { ProjectDefinition } from '../models/ProjectDefinition'
import Utils from '../utils/Utils'
import AppsDataStore from './AppsDataStore'
Classes:
class ProjectsDataStore {
Functions:
function isNameAllowed(name: string) {
function () {
function (allProjects) {
function () {
function (projects) {
function () {
function (project) {
function () {
function (allProjects) {
function () {
... (5 more functions)

File: src/datastore/RegistriesDataStore.ts
Imports:
import { v4 as uuid } from 'uuid'
import ApiStatusCodes from '../api/ApiStatusCodes'
import {
import CaptainEncryptor from '../utils/Encryptor'
import configstore = require('configstore')
Classes:
class RegistriesDataStore {
Functions:
function () {
function () {
function (registries) {
function () {
function (registries) {
function () {
function (registries) {
function () {
function (registries: IRegistryInfoEncrypted[]) {
function () {
... (5 more functions)

File: src/docker/DockerApi.ts
Imports:
import Base64Provider = require('js-base64')
import Docker = require('dockerode')
import { v4 as uuid } from 'uuid'
... (14 more imports)
Classes:
class IDockerUpdateOrders {
class DockerApi {
Functions:
function (data) {
function (data) {
function (resolve) {
function () {
function () {
... (90 more functions)

File: src/docker/DockerUtils.ts
Imports:
import ApiStatusCodes from '../api/ApiStatusCodes'
import CaptainConstants from '../utils/CaptainConstants'
import Logger from '../utils/Logger'
import DockerApi from './DockerApi'
import SshClientImport = require('ssh2')
Classes:
class DockerUtils {
Functions:
function () {
function (token) {
function (resolve, reject) {
function (err) {
function () {
function (err, stream) {
function (data: string) {
function (data) {

File: src/handlers/BaseHandlerResult.ts

File: src/handlers/users/ProjectHandler.ts
Imports:
import { v4 as uuid } from 'uuid'
import DataStore from '../../datastore/DataStore'
import { ProjectDefinition } from '../../models/ProjectDefinition'
import Logger from '../../utils/Logger'
import { BaseHandlerResult } from '../BaseHandlerResult'

File: src/handlers/users/apps/appdata/AppDataHandler.ts
Imports:
import ApiStatusCodes from '../../../../api/ApiStatusCodes'
import ServiceManager from '../../../../user/ServiceManager'
import Logger from '../../../../utils/Logger'
import { BaseHandlerResult } from '../../../BaseHandlerResult'
Functions:
function (err: any) {

File: src/handlers/users/apps/appdefinition/AppDefinitionHandler.ts
Imports:
import DataStore from '../../../../datastore/DataStore'
import { ICaptainDefinition } from '../../../../models/ICaptainDefinition'
import ServiceManager from '../../../../user/ServiceManager'
import CaptainConstants from '../../../../utils/CaptainConstants'
import Logger from '../../../../utils/Logger'
... (3 more imports)
Functions:
function (error) {
function (key) {

File: src/injection/InjectionExtractor.ts
Imports:
import { Response } from 'express'
import { UserInjected } from '../models/InjectionInterfaces'
import { UserManager } from '../user/UserManager'
import { IAppDef } from '../models/AppDefinition'
Classes:
class InjectionExtractor {

File: src/injection/Injector.ts
Imports:
import { NextFunction, Request, Response } from 'express'
import ApiStatusCodes from '../api/ApiStatusCodes'
import BaseApi from '../api/BaseApi'
... (13 more imports)
Functions:
function injectGlobal() {
function (req: Request, res: Response, next: NextFunction) {
function injectUser() {
function (req: Request, res: Response, next: NextFunction) {
function (userDecoded) {
... (15 more functions)

File: src/models/AppDefinition.ts
Imports:
import { IHashMapGeneric } from './ICacheGeneric'

File: src/models/AutomatedCleanupConfigs.ts
Classes:
class AutomatedCleanupConfigsCleaner {

File: src/models/BackupMeta.ts
Imports:
import { ServerDockerInfo } from './ServerDockerInfo'

File: src/models/CapRoverTheme.ts

File: src/models/DockerAuthObj.ts

File: src/models/DockerSecret.ts

File: src/models/DockerService.ts

File: src/models/GoAccessInfo.ts
Classes:
class GoAccessInfo {

File: src/models/IBuiltImage.ts

File: src/models/ICacheGeneric.ts

File: src/models/ICaptainDefinition.ts

File: src/models/IImageSource.ts
Imports:
import { RepoInfo } from './AppDefinition'

File: src/models/IOneClickAppModels.ts
Imports:
import { IHashMapGeneric } from './ICacheGeneric'

File: src/models/IProFeatures.ts

File: src/models/IRegistryInfo.ts
Classes:
class IRegistryTypes {

File: src/models/IServerBlockDetails.ts

File: src/models/InjectionInterfaces.ts
Imports:
import DataStore from '../datastore/DataStore'
import OtpAuthenticator from '../user/pro/OtpAuthenticator'
import ServiceManager from '../user/ServiceManager'
import { UserManager } from '../user/UserManager'

File: src/models/LoadBalancerInfo.ts
Classes:
class LoadBalancerInfo {

File: src/models/NetDataInfo.ts
Classes:
class NetDataInfo {

File: src/models/OneClickApp.ts


INFO Files:
Analysis truncated: 73 more files not analyzed due to token limit.


Repository Analysis Summary:
- Files analyzed: 42 of 115 total files
- Token usage estimate: ~2858 tokens
- Token limit configured: 4000 tokens
