{
  "architecture_overview": "Dify is a low‑code AI application platform composed of a React frontend, a Go‑based API server, a worker service for inference, a PostgreSQL database, and a Redis cache. Components communicate over HTTPS and internal message queues.",
  "components": [
    {
      "name": "Frontend",
      "description": "React single‑page application that interacts with the API server via HTTPS.",
      "type": "frontend"
    },
    {
      "name": "API Server",
      "description": "Go service exposing REST/GraphQL endpoints for user management, app configuration, and task orchestration.",
      "type": "backend"
    },
    {
      "name": "Worker",
      "description": "Go worker that consumes inference jobs from a queue, calls external LLM providers, and writes results to the database.",
      "type": "service"
    },
    {
      "name": "Database",
      "description": "PostgreSQL instance storing user data, app definitions, and inference results.",
      "type": "database"
    },
    {
      "name": "Cache",
      "description": "Redis instance used for session storage, rate limiting, and lightweight caching.",
      "type": "cache"
    }
  ],
  "data_flows": [
    {
      "source": "Frontend",
      "destination": "API Server",
      "description": "HTTPS requests for authentication, app CRUD, and job submission."
    },
    {
      "source": "API Server",
      "destination": "Database",
      "description": "SQL queries for persisting user and app data."
    },
    {
      "source": "API Server",
      "destination": "Cache",
      "description": "Session tokens, rate‑limit counters, and short‑lived data."
    },
    {
      "source": "API Server",
      "destination": "Worker",
      "description": "Job payloads sent via Redis queue for asynchronous inference."
    }