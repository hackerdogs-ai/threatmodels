{
  "architecture_overview": "Dify is a modular AI application platform consisting of a React-based frontend, a Go/Node.js backend API, a PostgreSQL database, a vector store (Weaviate), and external LLM services (OpenAI, Anthropic, etc.). The frontend communicates with the backend over HTTPS, which in turn interacts with the database, vector store, and LLM APIs to process user requests and store results.",
  "components": [
    {
      "name": "Frontend",
      "description": "React SPA that handles user interactions, authentication UI, and communicates with the backend via REST/GraphQL.",
      "type": "frontend"
    },
    {
      "name": "Backend API",
      "description": "Go/Node.js service that implements business logic, authentication, request routing, and orchestrates calls to the database, vector store, and LLM APIs.",
      "type": "backend"
    },
    {
      "name": "PostgreSQL Database",
      "description": "Relational database storing user data, application metadata, and structured logs.",
      "type": "database"
    },
    {
      "name": "Vector Store (Weaviate)",
      "description": "Vector database for storing embeddings and performing similarity searches.",
      "type": "service"
    },
    {
      "name": "LLM Service",
      "description": "External large language model APIs (OpenAI, Anthropic, etc.) used for generating responses and embeddings.",
      "type": "service"
    }
  ],
  "data_flows": [
    {
      "source": "User",
      "destination": "Frontend",
      "description": "User submits input via browser; data sent over HTTPS."
    },
    {
      "source": "Frontend",
      "destination": "Backend API",
      "description": "API requests for authentication, data retrieval, and LLM invocation."
    },
    {
      "source": "Backend API",
      "destination": "PostgreSQL Database",
      "description": "CRUD operations for user profiles, app configs, and audit logs."
    },
    {
      "source": "Backend API",
      "destination": "Vector Store",
      "description": "Store and query embeddings for similarity search."
    },
    {
      "source": "Backend API",
      "destination": "LLM Service",
      "description": "Send prompts and receive generated text or embeddings."
    },
    {
      "source": "LLM Service",
      "destination": "Backend API",
      "description": "Return generated content to be processed or stored."
    }